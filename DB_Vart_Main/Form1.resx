<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAAAAEACABoBQAANgAAACAgAAABAAgAqAgAAJ4FAAAwMAAAAQAIAKgOAABGDgAAKAAAABAA
        AAAgAAAAAQAIAAAAAAAAAQAAEgsAABILAAAAAQAAAAEAABISFwAWFhoALSkIAC0pCQA8NQQAPTYEAC8u
        JwAwMCkAUUgEAFFIBQBDQjgARUM7AE5MNwBQTjoAWlQmAF1XJABbVi4AXFYoAFlVNABaVjoAY1gCAGJY
        BAB8bwUAcGcVAHZsEwBSUlQAV1hZAGJgTwBta14AZGRmAGVlZwBnZ2oAaWpsAHBwcgBxcXMAcnJ0AHR0
        cwB2dnIAdXV3AHh4dQCBdAUAgnUGAIl6BgCJfywAkYICAJeHAQCbigQAn44EAJ+PBQCejgcAjoQyAKiW
        AACsmgAArpsAAK6bAwComBYArp4aALGeAACynwEAq582ALOgAwC+qwMAsqU8ALCmVQCxqFsAwKwDAMOv
        AADHsgAAx7MBAMizAQDNtwEAzbgBANC6AQDRuwEA070BANS+AADVvwAA18ABANfBAQCHh4UAi4uKAJSU
        lQCZmZoAmZmbAJ2dnACenqAAn5+gAJ+fogChoaMAo6OjAKampwCnp6oAqKiqAKioqwCtra8Ar6+wALKz
        swC5ubkAubm8ALu7vAC9vb4Avr7AAL+/wgDAvJYAxsKYAOvkpADr5asAwcHCAMXFxgDGxsYAzc3OANHR
        0QDS0tUA19jbANnZ3ADt6ckA7+3QAODg4wDn5+kA6+vtAO/v7wDz8/MA9fX1APX19gD39/cA+vr6APr6
        +wD7+/sA/Pz8AP39/QD+/v4A////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACDg4ODg4ODf3+Dg4ODg4ODg4ODg4OD
        gFJWgYODg4ODg4ODg4ODgVgAAVyCg4ODg4ODg4ODelMKAgMLVXyDg4ODg4N9biMnPzAxQCQmb3+Dg4Nr
        IR5eaTcvLjhqXR0ibYODWhp3cysJPDYIMnR2GV+Dg3gfaDsEKElIFgU+ZyB5g4ODVxhHRUtMTEtERhdb
        g4ODg3IOQ0o9OjpBS0IQdYODg4N7GzVNKQ0MKk4zHH6Dg4ODgyUtNBNxcBI5LE+Dg4ODg4NQFBFmg4Ni
        DxVUg4ODg4ODUQdhg4ODgmAGWYODg4ODg2Rlg4ODg4OCY2yDg4ODg4OAgoODg4ODg4KAg4ODAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACgA
        AAAgAAAAQAAAAAEACAAAAAAAAAQAABILAAASCwAAAAEAAAABAAABAQYADQwFAAwMDgAQDwQAFBIHABYV
        CwAZFwYAHBkHAB4bCQAVFRUAFhYZABkYFQAZGRsAHR0hAB8gIwAiHwcAIB0IACUiBgAlIQgALSgGAC8q
        CAAzLgQANjAFADgzCAA+OAoANTESACMjJgAmJikAKysuADM0NgA1NjkANzg6ADw8PgA+PkEAP0BCAEE7
        BgBDPhUAUUkGAFhPBwBdUwcAXFMIAGFXBgBlWggAal8GAGleCABkWgYAbWEHAG9kCQByZgUAcWcPAHdr
        BgB2agkAem0GAHtuCQB4bRIAfnEHAHxxFABDREYARkdJAEdISwBKSkwAUlNVAFZXWgBZWlsAXl9gAG9r
        RQBwbEoAYmJkAGdnaQBoZ2kAa2tuAHJydAB4eXsAfn+AAH+AggCCdggAiXsGAIN1BgCGehcAjoAGAJaG
        BgCejQYAn48IAKWTBQCunAUAqpkLALGeBAC2owYAuaYGALqnCgC9qQUAtqQQAISDegC9sEAAwK0NAMCt
        BADHsQQAx7MLAMq1AwDMtw4Az7kCANO9AQDQvBMAx7pOANnGIQDbyS0A3s5DANfNdQDc0GQA4NJTAOHV
        dADi13gA5dp4AIGBhACGh4kAioqLAJWUiACSkpMAm5ucAJ+foACioqMApqaoAKurrAC6uKcAsrKzALe3
        uAC7u7wAv7/AAN7VhgDDwacA596IAOngggDs5JUA8u27AMHBwgDMzM0A09PUANzc3AD08csA9/XaAOPj
        5ADo5+gA6+vsAO/w8QD5+OQA+/rsAPPz8wD39/gA+Pf4APz88wD///8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAlpaWlpaWlpaWlpaWlpaWlpaW
        lpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaUlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaW
        lHd6lJaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpZ6DRp+lpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaW
        lpaWfhwAAB2HlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWln8dAAAAACCHlpaWlpaWlpaWlpaWlpaWlpaW
        lpaWlpZ9HQAAAAAAAB+GlpaWlpaWlpaWlpaWlpaWlpaWlpaSdhodQRglJSRCHBx5k5aWlpaWlpaWlpaW
        lpaWlpaUiUYMPIFdM2JgM2d7IQxIiZaWlpaWlpaWlpaWlpaWjHYdDEeJg1UuZGIqW4SJRAoheIyWlpaW
        lpaWlpaOh3IgDDl6k4VoUClkYihTaYqSeCAMOXWHj5aWlpaWhz0NDDl2jJaLamUuLGVkJzRlbZCWjHUg
        Cho/iZaWlpaJIAp3jZaWkWxZUBdMZWU0GFFZbpGWlox1AjyNlpaWlpZ4C3WWlpFrMRIBFFdlZVQSBBM4
        gJWWlkkKfJaWlpaWlo07H4mRbzYBAAdMZWVlZDcEAAFOgpWIHD6OlpaWlpaWlngMdHBjLiMoUWVlZWVl
        ZFAmGDJmcFwMfJaWlpaWlpaWjB8kYWVkYmRlZWVlZWVlZWRiZGVeGTuOlpaWlpaWlpaWSQZTZWVlZWVl
        ZWVlZWVlZWVlZVAFdZaWlpaWlpaWlpaGDDBlZWVlZWVlZWVlZWVlZWVkKRqIlpaWlpaWlpaWlowhI2Jl
        ZWRXUVNWVlNTWWVlZV8VPY6WlpaWlpaWlpaWlEYSV2VlZWIvBhAIBjViZWVlUwhylpaWlpaWlpaWlpaW
        dQVQZWVlVxYcckoaI1plZWVMC3yWlpaWlpaWlpaWlpZ9CTJlZWAoDHqWlnYLLWRlZS4aiJaWlpaWlpaW
        lpaWlocNKWVkMAVxlJaWkkcFN2RlJR2MlpaWlpaWlpaWlpaWiRwlYksFQ42WlpaWjD8GT2IjOo+WlpaW
        lpaWlpaWlpaNHyM1Bz6MlpaWlpaWiTwSSxU+kpaWlpaWlpaWlpaWlo45AwU+iZaWlpaWlpaWiDsEAUOU
        lpaWlpaWlpaWlpaWkjoAPomWlpaWlpaWlpaWiDwAQ5SWlpaWlpaWlpaWlpaOPT+MlpaWlpaWlpaWlpaW
        iT1Ek5aWlpaWlpaWlpaWlpJ6jJaWlpaWlpaWlpaWlpaWiX2UlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaW
        lpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlpaWlgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAAAADAA
        AABgAAAAAQAIAAAAAAAACQAAEgsAABILAAAAAQAAAAEAAAICBQAFBQkACAYBAAwKBAAKCgwADQ0RABAP
        BQAUEgQAGRcCABgWCAAdGgYAHRoIABISFQAVFRkAGxseABsbFwAeHiEAIx8EACUhBgAnIwgAKCQJAC0o
        BgAoJhoAMSwHADEsCQA1MAgAOzUGADs1CAA/OQsANTAGACEiJAAnJyoAKSotACcoKwAuLzAAMjM1ADc3
        OQA6OjwAPj9BAEE7CABCOwcAR0AJAExFCABJQQcAUEcIAFNLCABUSwcAXFMKAF5UBwBhVwgAZFoIAGle
        CQBpXgcAbGIHAG5jCgB2aQcAem0IAHNpCwB9cQwAQ0NFAEZGSQBHSEsASkpMAE5PUQBSU1QAVVZYAFpa
        XABfX2EAX2BiAGNjZQBoZ2oAampsAG5ucABxcnQAdnZ4AHx8fAB/f4AAg3UIAId5CACKfAgAgnUHAI+B
        CQCUhQcAlIUJAJuLBwCejQkAkYYcAI2EPQCllAcArJoGAKaVCQCjlR4Asp8GALCeCgC1ogYAuqcGALqn
        CAC9qQUAu6gQALipKACXj0sAjIt+AMKuBQDHsgMAy7YDAM65AwDTvQEA1L4LAMq6NADDtTsA18ACANrC
        AQDWwhUA1sIeANjFIgDbyC8A3cs4ANTFOADNwEsA3c5FANbHRwDf0UkA3tFZAOHTUgDj12wA5Np7AIOD
        hQCHh4gAioqMAI6PkACTlJUAlpeZAJqanACfoKEAoqKjAKanqACop6gAq6usAKeoqQCur7AAs7O0ALa2
        uAC7u7wAv7/AANDLmQDc1psA492dAODcrgDo4I0A6eGTAO7nqQDv6a8A7eenAO7psQDx7LwAwsLDAMfH
        yADLy8wAz9DQANDP0QDT09QA2trbAPLuwgDx79kA9fPXAOTk5ADn6OgA7OztAO/v4wD5+ewA9PT0APf3
        +AD7+/YA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACtra2tra2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2traqrra2tra2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2tra2tra2tra2tra2tqoqMq62tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2riR8jj6ytra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2P
        JAAAPZ+tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2trZ08AQAAAUKhra2tra2t
        ra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tnkABAAAAAARFoa2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2tra2tra2tra2fQQQAAAAAAAAFR6Gtra2tra2tra2tra2tra2tra2tra2tra2tra2t
        ra2tra2trZtABAAAAAAAAAAABEWgra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2qjT0BDhYD
        BAEEAwYeDQRBm6ytra2tra2tra2tra2tra2tra2tra2tra2tra2traaEJAAgZVccMzYzMhxkSxABO4qn
        ra2tra2tra2tra2tra2tra2tra2tra2tra2tnkoWACWHkmMvX2lqXS9sk4MiAB9+oa2tra2tra2tra2t
        ra2tra2tra2tra2traaGPgQFQI6je1orX2pqWipifKiJPAEMQIunra2tra2tra2tra2tra2tra2tra2n
        iUMOAB5LoKyUcFQcXmpqWhtdcpirnUgOAB9Ijqetra2tra2tra2tra2tra2roYVDHwEMQIunrZp0ak4b
        XmpqWhdUbnekraaGPgQEIEeKoa2tra2tra2tra2qoIZJOw4BBDuCoautpHprajIbYGpqWRc4amt8qa2r
        noAlBAIePkqKoKutra2tra2mRQ4EAQ5Ag6Cqra2plGtqZhsqZmpqYBssaGpykqytraqdgD4NAQUOS6et
        ra2tra2qgAQEP42hqq2trayVcmloTwozaGpqZy0RVWhqc5atra2tqqGKJQENhqutra2tra2toT4AQKWt
        ra2trZZsUjErEwlSampqalAGFSozVXWara2tra2eJQBDpa2tra2tra2tqoYMHoStra2rmW0yCgQEAChg
        ampqalwZAAEEEzZ2oqutra2ADRCNq62tra2tra2traFAAEGlra2ZdTYGAAAAE1RqampqamlPCgAAAAk6
        eqKtrZ47AEamra2tra2tra2trauGDB6IrJd0WBgBAQMbUmhqampqampoThcDAAAaXXmirIINDoytra2t
        ra2tra2tra2hPgFFkXRuWTItMU5eampqampqampqaFxQMC42Xm55kD8AQ6Wtra2tra2tra2tra2qggUW
        W2pqamloaGpqampqampqampqampqaWlpaW5uVgsNhqutra2tra2tra2tra2tmyMGN2pqampqampqampq
        ampqampqampqam5paW5nMQE8oK2tra2tra2tra2tra2tp0cAK19qampqampqampqampqampqampqam5u
        bm5cHQF+qq2tra2tra2tra2tra2tq4YMElRuampqampqampqampqampqampqamluaW5PCB6Nra2tra2t
        ra2tra2tra2trZ0kAzdqampqampnZ2hqampqampoZ2hqamlubmcwAj+hra2tra2tra2tra2tra2traVF
        AC5mampqampdU09UWFlZWFJPU2Bqam5pbl4pAUynra2tra2tra2tra2tra2traqAABdZbmpqamppXSwK
        ChISCgsxXmpqam5ublUSDYqtra2tra2tra2tra2tra2tra2KDhFSbmpqampqYCcBDCAgBQMtZmpqamlu
        aToHJJytra2tra2tra2tra2tra2tra2bIwM4ampqampnMwMOfo6NSA0HOGlqampqaDMAQaGtra2tra2t
        ra2tra2tra2tra2gPgAyaGpqampOCgVLp62tpkUEFFNqampuZiwASaetra2tra2tra2tra2tra2tra2l
        RAAsYW5qalUVAUChra2trZ07ABpZampuXBoBgKutra2tra2tra2tra2tra2tra2nSgAaXm5uWSgCJJur
        ra2trauLIAMsXm5uWRUNhK2tra2tra2tra2tra2tra2tra2rfwEXWW9eKgMgiaqtra2tra2qhBADMGZv
        VBIQia2tra2tra2tra2tra2tra2tra2tggUVWF8uAxCEqq2tra2tra2tp4ANBjJmUggfjq2tra2tra2t
        ra2tra2tra2tra2thQ0SOjADEICnra2tra2tra2traZLDAc1Nwcjm62tra2tra2tra2tra2tra2tra2t
        ig4DFAYOgKetra2tra2tra2tra2lSgwHEgIlm62tra2tra2tra2tra2tra2tra2tiw4AAA6Ap62tra2t
        ra2tra2tra2tpUsMAAAlna2tra2tra2tra2tra2tra2tra2tjB4AEIGnra2tra2tra2tra2tra2traVL
        DQAlna2tra2tra2tra2tra2tra2tra2tjBAeg6etra2tra2tra2tra2tra2tra2mfg4lna2tra2tra2t
        ra2tra2tra2tra2tjD6Eqq2tra2tra2tra2tra2tra2tra2tp4BCna2tra2tra2tra2tra2tra2tra2t
        oZuqra2tra2tra2tra2tra2tra2tra2traadpq2tra2tra2tra2tra2tra2tra2trK2tra2tra2tra2t
        ra2tra2tra2tra2tra2rq62tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2t
        ra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2tra2t
        ra0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>